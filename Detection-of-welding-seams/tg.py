import telebot
import requests
import cv2
import numpy as np
import os
from telebot import types

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('6707146959:AAHb0L7gtQ7JfeRnHNcA1_a4hWqGUkmT09Q')

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
privet = "–ü—Ä–∏–≤–µ—Ç, –º–æ–π –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥! –Ø —Ç–≤–æ–π —á–∞—Ç-–±–æ—Ç. –Ø –º–æ–≥—É –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ñ–µ–∫—Ç—ã –≤ —Ñ–∞–π–ª–∞—Ö —Ñ–æ—Ä–º–∞—Ç–∞ JPG.\n–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–µ—Ç–µ –º–æ–¥–µ–ª—å - /select_model"

model = "model1"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def help_(message):
    help_text = "/start - –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/select_model - –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å"
    bot.send_message(message.from_user.id, help_text)

@bot.message_handler(commands=['select_model'])
def select_model(message):
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("YoLOv10üòéüìä", callback_data="model1")
    button2 = types.InlineKeyboardButton("RTDETRüöÄüíª", callback_data="model2")
    markup.add(button1, button2)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ["model1", "model2"])
def callback_select_model(call):
    global model
    model = call.data
    bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {model}. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ JPG")
    bot.answer_callback_query(call.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.from_user.id, privet)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
@bot.message_handler(content_types=['document'])
def handle_file(message):
    try:
        file_info = bot.get_file(message.document.file_id)
        file_extension = message.document.file_name.split('.')[-1].lower()
        
        if file_extension == 'jpg':
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            downloaded_file = bot.download_file(file_info.file_path)
            file_path = f"./{message.document.file_name}"
            
            with open(file_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            addr = 'https://6152-83-143-66-61.ngrok-free.app'
            test_url = addr + '/api/test'
            content_type = 'image/jpeg'
            headers = {'content-type': content_type}
            
            # –ß—Ç–µ–Ω–∏–µ –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img = cv2.imread(file_path)
            height, width, _ = img.shape  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            _, img_encoded = cv2.imencode('.jpg', img)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            response = requests.post(test_url, data=img_encoded.tobytes(), headers=headers)
            server_response = response.json() if response.status_code == 200 else {'error': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            if server_response and not 'error' in server_response:
                names = ["adj", "int", "geo", "pro", "non"]
                
                if model == "model1":
                    colors = {
                        "adj": (255, 0, 0),    # –ö—Ä–∞—Å–Ω—ã–π
                        "int": (0, 255, 0),    # –ó–µ–ª–µ–Ω—ã–π
                        "geo": (0, 0, 255),    # –°–∏–Ω–∏–π
                        "pro": (255, 255, 0),  # –ñ–µ–ª—Ç—ã–π
                        "non": (255, 0, 255)   # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
                    }
                elif model == "model2":
                    colors = {
                        "adj": (255, 0, 255),  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
                        "int": (0, 255, 0),    # –ó–µ–ª–µ–Ω—ã–π
                        "geo": (0, 0, 255),    # –°–∏–Ω–∏–π
                        "pro": (255, 255, 0),  # –ñ–µ–ª—Ç—ã–π
                        "non": (255, 0, 0)     # –ö—Ä–∞—Å–Ω—ã–π
                    }
                
                unique_classes = set()
                shift_x, shift_y = -0.02, -0.02  # –°–¥–≤–∏–≥ –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö (—Ä–µ–≥—É–ª–∏—Ä—É–π—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è)
                for item in server_response:
                    class_name = names[item['class_id']]
                    unique_classes.add(class_name)
                    
                    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–¥–≤–∏–≥–∞ –∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                    rel_x = item['rel_x'] + shift_x
                    rel_y = item['rel_y'] + shift_y
                    rel_x = max(0, min(rel_x, 1))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö [0, 1]
                    rel_y = max(0, min(rel_y, 1))
                    
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Ä–∞–∑–º–µ—Ä—ã –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
                    start_point = (int(rel_x * width), int(rel_y * height))
                    end_point = (
                        int((rel_x + item['width']) * width),
                        int((rel_y + item['height']) * height)
                    )

                    color = colors[class_name]  # –¶–≤–µ—Ç –¥–ª—è –∫–ª–∞—Å—Å–∞
                    thickness = 2  # –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–∏

                    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ–∫—Å–∞
                    cv2.rectangle(img, start_point, end_point, color, thickness)

                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–¥ –±–æ–∫—Å–æ–º
                    font = cv2.FONT_HERSHEY_SIMPLEX
                    font_scale = 3
                    font_thickness = 5
                    text_size = cv2.getTextSize(class_name, font, font_scale, font_thickness)[0]
                    text_x = start_point[0]
                    text_y = start_point[1] - 5 if start_point[1] > 15 else start_point[1] + 15  # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –≤—ã—Ö–æ–¥–∏–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    
                    cv2.putText(img, class_name, (text_x, text_y), font, font_scale, color, font_thickness)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –±–æ–∫—Å–∞–º–∏
                output_file_path = f"./processed_{message.document.file_name}"
                cv2.imwrite(output_file_path, img)
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                formatted_response = "–î–µ—Ñ–µ–∫—Ç—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: " + ", ".join(unique_classes)
                bot.send_message(message.from_user.id, formatted_response)
                with open(output_file_path, 'rb') as photo:
                    bot.send_photo(message.from_user.id, photo)
                
                # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                os.remove(output_file_path)
            else:
                formatted_response = "–ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
                bot.send_message(message.from_user.id, formatted_response)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            os.remove(file_path)
        else:
            bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ JPG.")
    except Exception as e:
        bot.send_message(message.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
try:
    bot.polling(none_stop=True, interval=0)
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")