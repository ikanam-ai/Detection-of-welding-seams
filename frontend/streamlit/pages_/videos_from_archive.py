import pandas as pd
import streamlit as st
import cv2
import numpy as np
import requests
import json
import zipfile
from PIL import Image, UnidentifiedImageError
import io
import os

from funcc.risovashka import draw_bounding_box, visualize_annotations
from funcc.ostalnoe import get_recommendations, process_zip_file

# HTML-–∫–æ–¥ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞
html_code = '''
<div style="text-align: center;">
    <a href="https://raw.githubusercontent.com/Y1OV/DFO_front/main/lct/rosatom-logo-brandlogos.net.png">
        <img src="https://raw.githubusercontent.com/Y1OV/DFO_front/main/lct/rosatom-logo-brandlogos.net.png" alt="Foo" style="width: 50%; height: auto;">
    </a>
</div>
'''




# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    st.title("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤ —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤")

    st.markdown(html_code, unsafe_allow_html=True)

    st.text_area(
        "‚öôÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?",
        "–ú–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, "
        "–∏—Å–ø–æ–ª—å–∑—É—è YoLOv10 –∏ RTDETR –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –¥–µ—Ç–µ–∫—Ü–∏–∏,"
        "–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–º–∏ –¥–µ—Ñ–µ–∫—Ç–∞–º–∏.",
        height=100
    )

    tab1, tab2 = st.tabs(["YoLOv10üòéüìä", "RTDETRüöÄüíª"])

    with tab1:
        st.title("–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ZIP-–∞—Ä—Ö–∏–≤–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")

        uploaded_zip = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ ZIP-–∞—Ä—Ö–∏–≤...", type=["zip"], key="uploader1")

        class_names = ['adj', 'int', 'geo', 'pro', 'non']
        colors = {
            0: (255, 0, 255),
            1: (255, 0, 0),
            2: (0, 255, 0),    
            3: (0, 0, 255),  
            4: (255, 255, 0)
        }
    
        if st.button("–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–µ—Ñ–µ–∫—Ç—ã", key="single_button_1"):

            if uploaded_zip is not None:
                results = process_zip_file(uploaded_zip, class_names, colors)

                if results:
                    for file_name, annotated_image, unique_classes in results:
                        st.image(annotated_image, caption=f'{file_name} - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏', use_column_width=True)

                        if unique_classes:
                            unique_classes_str = ', '.join(unique_classes)
                            st.text(f"–î–µ—Ñ–µ–∫—Ç—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ {file_name}: {unique_classes_str}")

                            st.markdown(
                                f"<span style='color:yellow'>{'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:'}</span>",
                                unsafe_allow_html=True
                            )
                            recommendations = get_recommendations(unique_classes)
                            
                            for idx, (cls, rec) in enumerate(recommendations.items()):
                                st.text_area(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {cls}", rec, height=100, key=f"rec_{idx}_{cls}")
                        else:
                            st.text(f"–î–µ—Ñ–µ–∫—Ç—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ {file_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                else:
                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞.")
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ ZIP-–∞—Ä—Ö–∏–≤.")

    with tab2:
        st.title("–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ZIP-–∞—Ä—Ö–∏–≤–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")

        uploaded_zip = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ ZIP-–∞—Ä—Ö–∏–≤...", type=["zip"], key="uploader2")

        class_names = ['adj', 'int', 'geo', 'pro', 'non']
        colors = {
            0: (255, 0, 0),    # adj - –∫—Ä–∞—Å–Ω—ã–π
            1: (0, 255, 0),    # int - –∑–µ–ª–µ–Ω—ã–π
            2: (0, 0, 255),    # geo - —Å–∏–Ω–∏–π
            3: (255, 255, 0),  # pro - –∂–µ–ª—Ç—ã–π
            4: (255, 0, 255)   # non - –ø—É—Ä–ø—É—Ä–Ω—ã–π
        }

        if st.button("–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–µ—Ñ–µ–∫—Ç—ã", key="single_button_2"):

            if uploaded_zip is not None:
                results = process_zip_file(uploaded_zip, class_names, colors)

                if results:
                    for file_name, annotated_image, unique_classes in results:
                        st.image(annotated_image, caption=f'{file_name} - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏', use_column_width=True)

                        if unique_classes:
                            unique_classes_str = ', '.join(unique_classes)
                            st.text(f"–î–µ—Ñ–µ–∫—Ç—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ {file_name}: {unique_classes_str}")

                            st.markdown(
                                f"<span style='color:yellow'>{'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:'}</span>",
                                unsafe_allow_html=True
                            )
                            recommendations = get_recommendations(unique_classes)
                            
                            for idx, (cls, rec) in enumerate(recommendations.items()):
                                st.text_area(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {cls}", rec, height=100, key=f"rec_{idx}_{cls}")
                        else:
                            st.text(f"–î–µ—Ñ–µ–∫—Ç—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ {file_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                else:
                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞.")
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ ZIP-–∞—Ä—Ö–∏–≤.")
                
if __name__ == "__main__":
    main()
